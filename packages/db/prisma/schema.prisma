// datasource and generator
 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 generator client {
  provider = "prisma-client-js"
}

 // Extensions
 // pgvector
 // Requires: CREATE EXTENSION IF NOT EXISTS vector;
 // We'll model Vector as Bytes in Prisma and handle via raw SQL where needed in MVP.

 model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  role          Role     @default(CLIENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  conversations Conversation[]
  auditLogs     AuditLog[]
 }

 enum Role {
  CLIENT
  ADMIN
  CREATOR
 }

 model Character {
  id            String   @id @default(cuid())
  slug          String   @unique
  displayName   String
  status        CharacterStatus @default(PUBLISHED)
  bio           String
  traits        Json       // persona tags, emotions supported
  voiceId       String?    // ElevenLabs voice
  pricingCents  Int        // per 30s
  demoVideoUrl  String?
  posterUrl     String?
  memoryIndexId String?    // pgvector index/group
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  conversations Conversation[]
  memories      Memory[]
 }

 enum CharacterStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
 }

 model Order {
  id            String   @id @default(cuid())
  userId        String
  characterId   String
  status        OrderStatus @default(PENDING)
  script        String      // original user script
  shapedScript  String?     // LLM-refined persona-consistent script
  emotion       String
  durationSec   Int
  ttsUrl        String?
  renderUrl     String?
  totalCents    Int
  stripePiId    String?     // payment intent
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  character     Character   @relation(fields: [characterId], references: [id])
  license       License?
  job           Job?
 }

 enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  DELIVERED
  FAILED
  REFUNDED
 }

 model License {
  id            String   @id @default(cuid())
  orderId       String   @unique
  scope         LicenseScope
  termMonths    Int
  territories   String
  issuedAt      DateTime @default(now())
  text          String
  order         Order    @relation(fields: [orderId], references: [id])
 }

 enum LicenseScope {
  WEB_ORGANIC
  PAID_SOCIAL
  BROADCAST
  INTERNAL_ONLY
 }

 model Job {
  id            String   @id @default(cuid())
  orderId       String   @unique
  type          JobType
  adapter       String
  status        JobStatus @default(QUEUED)
  input         Json
  output        Json?
  error         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
 }

 enum JobType {
  TTS
  RENDER
 }

 enum JobStatus {
  QUEUED
  RUNNING
  SUCCEEDED
  FAILED
 }

 model Conversation {
  id            String   @id @default(cuid())
  userId        String
  characterId   String
  messages      Json
  createdAt     DateTime @default(now())
  user          User      @relation(fields: [userId], references: [id])
  character     Character @relation(fields: [characterId], references: [id])
 }

 model Memory {
  id            String   @id @default(cuid())
  characterId   String
  kind          String
  content       String
  embedding     Bytes   // Placeholder for pgvector; handle via raw SQL if needed
  createdAt     DateTime @default(now())
  character     Character @relation(fields: [characterId], references: [id])
 }

 model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  actor     String
  action    String
  target    String?
  meta      Json?
  createdAt DateTime  @default(now())

  user      User?     @relation(fields: [userId], references: [id])
 }

 // NextAuth models (simplified)
 model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
 }

 model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

 model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 }